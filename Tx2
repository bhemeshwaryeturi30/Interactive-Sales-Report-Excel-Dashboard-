# tableau_inventory_username_password.py
# -------------------------------------
# Inventories Tableau content (projects → workbooks → views) using username/password auth.
# Captures metadata + clickable URLs and can optionally export each view's underlying data as CSV.

import os
import pandas as pd
import tableauserverclient as TSC

# ========= CONFIG (EDIT THESE) =========
TABLEAU_SERVER = "https://mytableau.cvs.com"  # from your screenshot URL
SITE_ID        = "RX_OPS"                     # site in the URL
USERNAME       = "YOUR_USERNAME"
PASSWORD       = "YOUR_PASSWORD"

OUTPUT_CSV         = "tableau_inventory.csv"
DOWNLOAD_VIEW_CSV  = False   # True = also export each view’s underlying data CSV (requires permission)
VIEW_CSV_DIR       = "view_csvs"
# ======================================

def link_for_view(server_base: str, site_id: str, content_url: str) -> str:
    # UI deeplink to a view
    return f"{server_base}/#/site/{site_id}/views/{content_url}"

def link_for_workbook(server_base: str, site_id: str, wb_content_url: str) -> str:
    # UI deeplink to a workbook
    return f"{server_base}/#/site/{site_id}/workbooks/{wb_content_url}"

def main():
    server = TSC.Server(TABLEAU_SERVER, use_server_version=True)
    auth = TSC.TableauAuth(USERNAME, PASSWORD, SITE_ID)

    rows = []

    with server.auth.sign_in(auth):
        # Users (for owner name)
        all_users, _ = server.users.get()
        users_by_id = {u.id: u for u in all_users}

        # Projects
        projects, _ = server.projects.get()
        projects_by_id = {p.id: p for p in projects}

        # Datasources (for connection names/types if resolvable)
        datasources, _ = server.datasources.get()
        ds_by_id = {d.id: d for d in datasources}

        # Page through all workbooks
        req = TSC.RequestOptions()
        while True:
            workbooks, pagination = server.workbooks.get(req_options=req)

            for wb in workbooks:
                proj = projects_by_id.get(wb.project_id)
                project_name = proj.name if proj else None

                owner = users_by_id.get(wb.owner_id)
                owner_name = owner.name if owner else None

                wb_url = link_for_workbook(TABLEAU_SERVER, SITE_ID, wb.content_url)

                # Populate views & connections for this workbook
                try:
                    server.workbooks.populate_views(wb)
                except Exception:
                    wb.views = []

                try:
                    server.workbooks.populate_connections(wb)
                except Exception:
                    wb.connections = []

                # Best-effort data source names/types
                ds_names, ds_types = [], []
                for c in getattr(wb, "connections", []):
                    ds_obj = ds_by_id.get(getattr(c, "datasource_id", None))
                    if ds_obj:
                        ds_names.append(ds_obj.name or "")
                        ds_types.append(ds_obj.connection_type or "")
                    else:
                        # Embedded/unknown; keep hints
                        ds_names.append(getattr(c, "server_address", "") or "embedded/unknown")
                        ds_types.append(getattr(c, "connection_type", "") or "unknown")

                for v in getattr(wb, "views", []):
                    v_url = link_for_view(TABLEAU_SERVER, SITE_ID, v.content_url)

                    # Optional underlying data CSV export
                    saved_csv_path = None
                    if DOWNLOAD_VIEW_CSV:
                        try:
                            os.makedirs(VIEW_CSV_DIR, exist_ok=True)
                            csv_bytes = server.views.populate_csv(v)  # requires "Download Full Data" permission
                            safe_name = f"{(project_name or 'NoProject')}__{wb.name}__{v.name}".replace("/", "_").replace("\\", "_")
                            saved_csv_path = os.path.join(VIEW_CSV_DIR, f"{safe_name}.csv")
                            with open(saved_csv_path, "wb") as f:
                                f.write(csv_bytes)
                        except Exception as e:
                            saved_csv_path = f"ERROR: {e}"

                    rows.append({
                        "project_name": project_name,
                        "project_id": wb.project_id,
                        "workbook_name": wb.name,
                        "workbook_id": wb.id,
                        "workbook_url": wb_url,
                        "workbook_created": getattr(wb, "created_at", None),
                        "workbook_updated": getattr(wb, "updated_at", None),
                        "owner": owner_name,
                        "view_name": v.name,
                        "view_id": v.id,
                        "view_url": v_url,
                        "view_total_views": getattr(v, "total_views", None),
                        "datasource_names": "; ".join(sorted(set(n for n in ds_names if n))),
                        "datasource_types": "; ".join(sorted(set(t for t in ds_types if t))),
                        "saved_view_csv": saved_csv_path,
                    })

            # pagination
            if pagination.current_page_number < pagination.total_page_count:
                req.page_number = pagination.current_page_number + 1
            else:
                break

    # Save inventory
    df = pd.DataFrame(rows).sort_values(["project_name", "workbook_name", "view_name"], na_position="last")
    df.to_csv(OUTPUT_CSV, index=False)
    print(f"Wrote {len(df):,} rows to {OUTPUT_CSV}")
    if DOWNLOAD_VIEW_CSV:
        print(f"Per-view CSVs (if any) saved under: {VIEW_CSV_DIR}")

if __name__ == "__main__":
    main()
