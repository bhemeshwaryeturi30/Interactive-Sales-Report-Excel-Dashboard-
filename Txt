#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Export ALL Tableau view data (CSV) for a site.
- Iterates Project -> Workbook -> View
- Auth via PAT (recommended) or username/password
- Optional: limit to a single project by name
- Optional: apply global filters/parameters to every view (--vf Key=Value)
- Retries transient failures; creates a clean folder tree:
    <output>/<site>/<project>/<workbook>/<view>.csv
"""

import os
import sys
import argparse
from pathlib import Path
from tenacity import retry, wait_exponential, stop_after_attempt
import tableauserverclient as TSC


def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(
        description="Export all view data from Tableau Server to CSV files."
    )
    # Required basics
    p.add_argument("--server", required=True, help="Tableau base URL, e.g. https://mytableau.example.com")
    p.add_argument("--site", required=True, help="Site ID, e.g. RX_OPS (empty string for Default site)")
    # Auth: choose PAT or user/pass
    p.add_argument("--pat_name", help="Personal Access Token name (recommended)")
    p.add_argument("--pat_secret", help="Personal Access Token secret")
    p.add_argument("--username", help="Username (use only if not using PAT)")
    p.add_argument("--password", help="Password (use only if not using PAT)")
    # Scope / options
    p.add_argument("--project", default=None, help="Limit to ONE project by EXACT name (optional)")
    p.add_argument("--out", default="tableau_exports", help="Output root directory")
    p.add_argument(
        "--vf",
        action="append",
        default=[],
        help="Global view filter/parameter in Key=Value form. Repeatable. Example: --vf 'Year=2025' --vf 'Region=West'"
    )
    p.add_argument("--max_retries", type=int, default=5, help="Max retries per view on transient errors")
    return p.parse_args()


def make_auth(args: argparse.Namespace):
    """Return the correct Tableau auth object (PAT preferred)."""
    if args.pat_name and args.pat_secret:
        return TSC.PersonalAccessTokenAuth(
            token_name=args.pat_name,
            personal_access_token=args.pat_secret,
            site_id=args.site
        )
    if args.username and args.password:
        return TSC.TableauAuth(
            username=args.username,
            password=args.password,
            site_id=args.site
        )
    sys.exit("ERROR: Provide either PAT (--pat_name/--pat_secret) OR --username/--password.")


def build_req_opts_from_vf(vf_list):
    """Translate --vf Key=Value pairs into a RequestOptions object (filters/parameters)."""
    if not vf_list:
        return None
    ro = TSC.RequestOptions()
    for item in vf_list:
        if "=" not in item:
            sys.exit(f"ERROR: Bad --vf '{item}'. Use Key=Value.")
        k, v = item.split("=", 1)
        ro.vf(k.strip(), v.strip())
    return ro


def safe_name(name: str) -> str:
    """Make a string safe for file/folder names."""
    return name.replace(os.sep, "_").replace(":", "-").strip()


def ensure_dir(path: Path):
    path.mkdir(parents=True, exist_ok=True)


def get_projects(server: TSC.Server, only_name: str | None):
    """Fetch projects; optionally filter by exact name."""
    projects, _ = server.projects.get()
    if only_name:
        filtered = [p for p in projects if p.name == only_name]
        if not filtered:
            sys.exit(f"ERROR: Project not found: '{only_name}'")
        return filtered
    return projects


def get_workbooks_for_project(server: TSC.Server, project_name: str):
    """Return all workbooks for a given project name."""
    req = TSC.RequestOptions()
    req.filter.add(
        TSC.Filter(
            TSC.RequestOptions.Field.ProjectName,
            TSC.RequestOptions.Operator.Equals,
            project_name,
        )
    )
    wbs, _ = server.workbooks.get(req_options=req)
    return wbs


def print_header(args: argparse.Namespace):
    print("=" * 80)
    print("Tableau Bulk Export - Views to CSV")
    print(f"Server : {args.server}")
    print(f"Site   : {args.site or '(Default)'}")
    if args.project:
        print(f"Project: {args.project}")
    print(f"Output : {Path(args.out).resolve()}")
    if args.vf:
        print(f"Filters: {args.vf}")
    print("=" * 80)


def main():
    args = parse_args()
    print_header(args)

    tableau_auth = make_auth(args)
    server = TSC.Server(args.server, use_server_version=True)
    req_opts_for_views = build_req_opts_from_vf(args.vf)

    # retry decorator configured at runtime (uses args.max_retries)
    def _retry():
        return retry(
            wait=wait_exponential(multiplier=1, min=2, max=30),
            stop=stop_after_attempt(args.max_retries)
        )

    @_retry()
    def export_view_csv(srv: TSC.Server, view: TSC.ViewItem, out_path: Path, req_opts):
        """Download CSV for a single view."""
        csv_bytes = srv.views.populate_csv(view, req_opts)
        out_path.write_bytes(csv_bytes)

    out_root = Path(args.out)
    ensure_dir(out_root)

    with server.auth.sign_in(tableau_auth):
        projects = get_projects(server, args.project)

        for proj in projects:
            proj_dir = out_root / safe_name(args.site or "Default") / safe_name(proj.name)
            ensure_dir(proj_dir)

            workbooks = get_workbooks_for_project(server, proj.name)
            if not workbooks:
                print(f"[INFO] No workbooks in project '{proj.name}'")
                continue

            for wb in workbooks:
                # Load views inside the workbook
                server.workbooks.populate(wb)
                wb_dir = proj_dir / safe_name(wb.name)
                ensure_dir(wb_dir)

                if not wb.views:
                    print(f"[INFO] Workbook has no views: {proj.name} / {wb.name}")
                    continue

                for view in wb.views:
                    out_csv = wb_dir / f"{safe_name(view.name)}.csv"
                    try:
                        export_view_csv(server, view, out_csv, req_opts_for_views)
                        print(f"[OK] {proj.name} / {wb.name} / {view.name}  ->  {out_csv}")
                    except Exception as e:
                        print(f"[FAIL] {proj.name} / {wb.name} / {view.name} :: {e}")

    print("\nDone.")


if __name__ == "__main__":
    main()
