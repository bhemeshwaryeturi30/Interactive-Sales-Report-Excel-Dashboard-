# tableau_inventory_pat_no_users.py
# ---------------------------------
# Inventories Tableau Server content using a PAT, without calling /users (works for non-admin roles).

import os
import pandas as pd
import tableauserverclient as TSC

# ========= CONFIG (EDIT THESE) =========
SERVER      = "https://mytableau.cvs.com"  # Root URL (no '/#/')
SITE_ID     = "RX_OPS"                     # From URL: https://.../#/site/RX_OPS/...
PAT_NAME    = "YOUR_PAT_NAME"              # PAT name you created
PAT_SECRET  = "YOUR_PAT_SECRET"            # PAT secret (shown once)
OUTPUT_CSV        = "tableau_inventory.csv"
DOWNLOAD_VIEW_CSV = False                  # True = export each view‚Äôs underlying data CSV (needs permission)
VIEW_CSV_DIR      = "view_csvs"
# ======================================

def link_for_view(server_base: str, site_id: str, content_url: str) -> str:
    return f"{server_base}/#/site/{site_id}/views/{content_url}"

def link_for_workbook(server_base: str, site_id: str, content_url: str) -> str:
    return f"{server_base}/#/site/{site_id}/workbooks/{content_url}"

def main():
    server = TSC.Server(SERVER, use_server_version=True)
    auth   = TSC.PersonalAccessTokenAuth(PAT_NAME, PAT_SECRET, SITE_ID)

    rows = []

    with server.auth.sign_in(auth):
        # --- Projects (ok for non-admins; returns those you can see)
        projects, _ = server.projects.get()
        projects_by_id = {p.id: p for p in projects}

        # --- Datasources (optional; best-effort description of connections)
        try:
            datasources, _ = server.datasources.get()
            ds_by_id = {d.id: d for d in datasources}
        except Exception:
            ds_by_id = {}

        # --- Workbooks (paged)
        req = TSC.RequestOptions()
        while True:
            workbooks, page = server.workbooks.get(req_options=req)

            for wb in workbooks:
                # Populate views and connections for this workbook
                try:
                    server.workbooks.populate_views(wb)
                except Exception:
                    wb.views = []

                try:
                    server.workbooks.populate_connections(wb)
                except Exception:
                    wb.connections = []

                proj   = projects_by_id.get(wb.project_id)
                wb_url = link_for_workbook(SERVER, SITE_ID, wb.content_url)

                # Datasource hints for this workbook (no /users calls)
                ds_names, ds_types = [], []
                for c in getattr(wb, "connections", []):
                    ds_obj = ds_by_id.get(getattr(c, "datasource_id", None))
                    if ds_obj:
                        ds_names.append(ds_obj.name or "")
                        ds_types.append(ds_obj.connection_type or "")
                    else:
                        # Embedded/unknown; include best-effort hints
                        ds_names.append(getattr(c, "server_address", "") or "embedded/unknown")
                        ds_types.append(getattr(c, "connection_type", "") or "unknown")

                for v in getattr(wb, "views", []):
                    v_url = link_for_view(SERVER, SITE_ID, v.content_url)

                    saved_csv_path = None
                    if DOWNLOAD_VIEW_CSV:
                        try:
                            os.makedirs(VIEW_CSV_DIR, exist_ok=True)
                            csv_bytes = server.views.populate_csv(v)  # requires ‚ÄúDownload Full Data‚Äù
                            safe = f"{(proj.name if proj else 'NoProject')}__{wb.name}__{v.name}".replace("/", "_").replace("\\", "_")
                            saved_csv_path = os.path.join(VIEW_CSV_DIR, f"{safe}.csv")
                            with open(saved_csv_path, "wb") as f:
                                f.write(csv_bytes)
                        except Exception as e:
                            saved_csv_path = f"ERROR: {e}"

                    rows.append({
                        "project_name":      proj.name if proj else None,
                        "project_id":        wb.project_id,
                        "workbook_name":     wb.name,
                        "workbook_id":       wb.id,
                        "workbook_url":      wb_url,
                        "workbook_created":  getattr(wb, "created_at", None),
                        "workbook_updated":  getattr(wb, "updated_at", None),
                        "owner_id":          getattr(wb, "owner_id", None),   # UUID; no /users lookup
                        "view_name":         v.name,
                        "view_id":           v.id,
                        "view_url":          v_url,
                        "view_total_views":  getattr(v, "total_views", None),
                        "datasource_names":  "; ".join(sorted(set(n for n in ds_names if n))),
                        "datasource_types":  "; ".join(sorted(set(t for t in ds_types if t))),
                        "saved_view_csv":    saved_csv_path
                    })

            if page.current_page_number < page.total_page_count:
                req.page_number = page.current_page_number + 1
            else:
                break

    df = pd.DataFrame(rows).sort_values(
        ["project_name", "workbook_name", "view_name"], na_position="last"
    )
    df.to_csv(OUTPUT_CSV, index=False)
    print(f"‚úÖ Wrote {len(df):,} rows to {OUTPUT_CSV}")
    if DOWNLOAD_VIEW_CSV:
        print(f"üìÅ Per-view CSVs (if exported) saved under: {VIEW_CSV_DIR}")

if __name__ == "__main__":
    main()
